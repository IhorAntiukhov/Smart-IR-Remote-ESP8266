// функция для декодирования ИК протокола пульта кондиционера и проверки того, поддерживается ли указаный протокол
String dumpACprotocol(decode_type_t protocol) {
  switch (protocol) {
    case decode_type_t::AIRTON: return "AIRTON";
    case decode_type_t::AIRWELL: return "AIRWELL";
    case decode_type_t::AMCOR: return "AMCOR";
    case decode_type_t::ARGO: return "ARGO";
    case decode_type_t::CARRIER_AC64: return "CARRIER_AC64";
    case decode_type_t::COOLIX: return "COOLIX";
    case decode_type_t::CORONA_AC: return "CORONA_AC";
    case decode_type_t::DAIKIN: return "DAIKIN";
    case decode_type_t::DAIKIN128: return "DAIKIN128";
    case decode_type_t::DAIKIN152: return "DAIKIN152";
    case decode_type_t::DAIKIN160: return "DAIKIN160";
    case decode_type_t::DAIKIN176: return "DAIKIN176";
    case decode_type_t::DAIKIN2: return "DAIKIN2";
    case decode_type_t::DAIKIN216: return "DAIKIN216";
    case decode_type_t::DAIKIN64: return "DAIKIN64";
    case decode_type_t::DELONGHI_AC: return "DELONGHI_AC";
    case decode_type_t::ECOCLIM: return "ECOCLIM";
    case decode_type_t::ELECTRA_AC: return "ELECTRA_AC";
    case decode_type_t::FUJITSU_AC: return "FUJITSU_AC";
    case decode_type_t::GOODWEATHER: return "GOODWEATHER";
    case decode_type_t::GREE: return "GREE";
    case decode_type_t::HAIER_AC: return "HAIER_AC";
    case decode_type_t::HAIER_AC176: return "HAIER_AC176";
    case decode_type_t::HAIER_AC_YRW02: return "HAIER_AC_YRW02";
    case decode_type_t::HITACHI_AC: return "HITACHI_AC";
    case decode_type_t::HITACHI_AC1: return "HITACHI_AC1";
    case decode_type_t::HITACHI_AC344: return "HITACHI_AC344";
    case decode_type_t::HITACHI_AC424: return "HITACHI_AC424";
    case decode_type_t::KELON:  return "KELON";
    case decode_type_t::KELVINATOR: return "KELVINATOR";
    case decode_type_t::LG: return "LG";
    case decode_type_t::LG2: return "LG2";
    case decode_type_t::MIDEA: return "MIDEA";
    case decode_type_t::MIRAGE: return "MIRAGE";
    case decode_type_t::MITSUBISHI_AC: return "MITSUBISHI_AC";
    case decode_type_t::MITSUBISHI112: return "MITSUBISHI112";
    case decode_type_t::MITSUBISHI136: return "MITSUBISHI136";
    case decode_type_t::MITSUBISHI_HEAVY_88: return "MITSUBISHI_HEAVY_88";
    case decode_type_t::MITSUBISHI_HEAVY_152: return "MITSUBISHI_HEAVY_152";
    case decode_type_t::NEOCLIMA: return "NEOCLIMA";
    case decode_type_t::PANASONIC_AC: return "PANASONIC_AC";
    case decode_type_t::PANASONIC_AC32: return "PANASONIC_AC32";
    case decode_type_t::RHOSS: return "RHOSS";
    case decode_type_t::SAMSUNG_AC: return "SAMSUNG_AC";
    case decode_type_t::SANYO_AC: return "SANYO_AC";
    case decode_type_t::SANYO_AC88: return "SANYO_AC88";
    case decode_type_t::SHARP_AC: return "SHARP_AC";
    case decode_type_t::TCL112AC: return "TCL112AC";
    case decode_type_t::TECHNIBEL_AC: return "TECHNIBEL_AC";
    case decode_type_t::TECO: return "TECO";
    case decode_type_t::TEKNOPOINT: return "TEKNOPOINT";
    case decode_type_t::TOSHIBA_AC: return "TOSHIBA_AC";
    case decode_type_t::TRANSCOLD: return "TRANSCOLD";
    case decode_type_t::TROTEC: return "TROTEC";
    case decode_type_t::TROTEC_3550: return "TROTEC_3550";
    case decode_type_t::TRUMA: return "TRUMA";
    case decode_type_t::VESTEL_AC: return "VESTEL_AC";
    case decode_type_t::VOLTAS: return "VOLTAS";
    case decode_type_t::WHIRLPOOL_AC: return "WHIRLPOOL_AC";
    default: return "unknown";
  }
  return "";
}

// функция для преобразовывания ИК протокола пульта кондиционера из строки
decode_type_t getACprotocol(String protocol) {
  if (protocol == "AIRTON") { return decode_type_t::AIRTON;
  } else if (protocol == "AIRWELL") { return decode_type_t::AIRWELL;;
  } else if (protocol == "AMCOR") { return decode_type_t::AMCOR;
  } else if (protocol == "ARGO") { return decode_type_t::ARGO;
  } else if (protocol == "CARRIER_AC64") { return decode_type_t::CARRIER_AC64;
  } else if (protocol == "COOLIX") { return decode_type_t::COOLIX;
  } else if (protocol == "CORONA_AC") { return decode_type_t::CORONA_AC;
  } else if (protocol == "DAIKIN") { return decode_type_t::DAIKIN;
  } else if (protocol == "DAIKIN128") { return decode_type_t::DAIKIN128;
  } else if (protocol == "DAIKIN152") { return decode_type_t::DAIKIN152;
  } else if (protocol == "DAIKIN160") { return decode_type_t::DAIKIN160;
  } else if (protocol == "DAIKIN176") { return decode_type_t::DAIKIN176;
  } else if (protocol == "DAIKIN2") { return decode_type_t::DAIKIN2;
  } else if (protocol == "DAIKIN216") { return decode_type_t::DAIKIN216;
  } else if (protocol == "DAIKIN64") { return decode_type_t::DAIKIN64;
  } else if (protocol == "DELONGHI_AC") { return decode_type_t::DELONGHI_AC;
  } else if (protocol == "ECOCLIM") { return decode_type_t::ECOCLIM;
  } else if (protocol == "ELECTRA_AC") { return decode_type_t::ELECTRA_AC;
  } else if (protocol == "FUJITSU_AC") { return decode_type_t::FUJITSU_AC;
  } else if (protocol == "GOODWEATHER") { return decode_type_t::GOODWEATHER;
  } else if (protocol == "GREE") { return decode_type_t::GREE;
  } else if (protocol == "HAIER_AC") { return decode_type_t::HAIER_AC;
  } else if (protocol == "HAIER_AC176") { return decode_type_t::HAIER_AC176;
  } else if (protocol == "HAIER_AC_YRW02") { return decode_type_t::HAIER_AC_YRW02;
  } else if (protocol == "HITACHI_AC") { return decode_type_t::HITACHI_AC;
  } else if (protocol == "HITACHI_AC1") { return decode_type_t::HITACHI_AC1;
  } else if (protocol == "HITACHI_AC344") { return decode_type_t::HITACHI_AC344;
  } else if (protocol == "HITACHI_AC424") { return decode_type_t::HITACHI_AC424;
  } else if (protocol == "KELON") { return decode_type_t::KELON;
  } else if (protocol == "KELVINATOR") { return decode_type_t::KELVINATOR;
  } else if (protocol == "LG") { return decode_type_t::LG;
  } else if (protocol == "LG2") { return decode_type_t::LG2;
  } else if (protocol == "MIDEA") { return decode_type_t::MIDEA;
  } else if (protocol == "MIRAGE") { return decode_type_t::MIRAGE;
  } else if (protocol == "MITSUBISHI_AC") { return decode_type_t::MITSUBISHI_AC;
  } else if (protocol == "MITSUBISHI112") { return decode_type_t::MITSUBISHI112;
  } else if (protocol == "MITSUBISHI136") { return decode_type_t::MITSUBISHI136;
  } else if (protocol == "MITSUBISHI_HEAVY_88") { return decode_type_t::MITSUBISHI_HEAVY_88;
  } else if (protocol == "MITSUBISHI_HEAVY_152") { return decode_type_t::MITSUBISHI_HEAVY_152;
  } else if (protocol == "NEOCLIMA") { return decode_type_t::NEOCLIMA;
  } else if (protocol == "PANASONIC_AC") { return decode_type_t::PANASONIC_AC;
  } else if (protocol == "PANASONIC_AC32") { return decode_type_t::PANASONIC_AC32;
  } else if (protocol == "RHOSS") { return decode_type_t::RHOSS;
  } else if (protocol == "SAMSUNG_AC") { return decode_type_t::SAMSUNG_AC;
  } else if (protocol == "SANYO_AC") { return decode_type_t::SANYO_AC;
  } else if (protocol == "SANYO_AC88") { return decode_type_t::SANYO_AC88;
  } else if (protocol == "SHARP_AC") { return decode_type_t::SHARP_AC;
  } else if (protocol == "TCL112AC") { return decode_type_t::TCL112AC;
  } else if (protocol == "TECHNIBEL_AC") { return decode_type_t::TECHNIBEL_AC;
  } else if (protocol == "TECO") { return decode_type_t::TECO;
  } else if (protocol == "TEKNOPOINT") { return decode_type_t::TEKNOPOINT;
  } else if (protocol == "TOSHIBA_AC") { return decode_type_t::TOSHIBA_AC;
  } else if (protocol == "TRANSCOLD") { return decode_type_t::TRANSCOLD;
  } else if (protocol == "TROTEC") { return decode_type_t::TROTEC;
  } else if (protocol == "TROTEC_3550") { return decode_type_t::TROTEC_3550;
  } else if (protocol == "TRUMA") { return decode_type_t::TRUMA;
  } else if (protocol == "VESTEL_AC") { return decode_type_t::VESTEL_AC;
  } else if (protocol == "VOLTAS") { return decode_type_t::VOLTAS;
  } else if (protocol == "WHIRLPOOL_AC") { return decode_type_t::WHIRLPOOL_AC;
  }
  return decode_type_t::UNKNOWN;
}
